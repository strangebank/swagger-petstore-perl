# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from douyin_open.Oauth2SilentLogin.api_client import ApiClient


class AuthorizeV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def oauth_authorize_v2_get(self, client_key, response_type, scope, redirect_uri, **kwargs):  # noqa: E501
        """获取授权码(code)  # noqa: E501

        注意该URL要在抖音端内的h5页面请求，这样才能带上抖音的登录态来获取用户的OpenId。 一旦clientKey有静默授权权限login_id，接口会以重定向的方式跳转到redirect_uri，并返回code。 拿到code之后再去调用https://open.douyin.com/oauth/access_token/。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth_authorize_v2_get(client_key, response_type, scope, redirect_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_key: 应用唯一标识 (required)
        :param str response_type: 填写code (required)
        :param str scope: 填login_id (required)
        :param str redirect_uri: 授权成功后的回调地址，必须以http/https开头。域名要跟申请应用时填写的授权回调域一致。用于调用https://open.douyin.com/oauth/access_token/换token。 (required)
        :param str state: 用于保持请求和回调状态，授权请求后会原样返回给接入方,如果是App则不用传该参数
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oauth_authorize_v2_get_with_http_info(client_key, response_type, scope, redirect_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.oauth_authorize_v2_get_with_http_info(client_key, response_type, scope, redirect_uri, **kwargs)  # noqa: E501
            return data

    def oauth_authorize_v2_get_with_http_info(self, client_key, response_type, scope, redirect_uri, **kwargs):  # noqa: E501
        """获取授权码(code)  # noqa: E501

        注意该URL要在抖音端内的h5页面请求，这样才能带上抖音的登录态来获取用户的OpenId。 一旦clientKey有静默授权权限login_id，接口会以重定向的方式跳转到redirect_uri，并返回code。 拿到code之后再去调用https://open.douyin.com/oauth/access_token/。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth_authorize_v2_get_with_http_info(client_key, response_type, scope, redirect_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_key: 应用唯一标识 (required)
        :param str response_type: 填写code (required)
        :param str scope: 填login_id (required)
        :param str redirect_uri: 授权成功后的回调地址，必须以http/https开头。域名要跟申请应用时填写的授权回调域一致。用于调用https://open.douyin.com/oauth/access_token/换token。 (required)
        :param str state: 用于保持请求和回调状态，授权请求后会原样返回给接入方,如果是App则不用传该参数
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_key', 'response_type', 'scope', 'redirect_uri', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oauth_authorize_v2_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_key' is set
        if ('client_key' not in params or
                params['client_key'] is None):
            raise ValueError("Missing the required parameter `client_key` when calling `oauth_authorize_v2_get`")  # noqa: E501
        # verify the required parameter 'response_type' is set
        if ('response_type' not in params or
                params['response_type'] is None):
            raise ValueError("Missing the required parameter `response_type` when calling `oauth_authorize_v2_get`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `oauth_authorize_v2_get`")  # noqa: E501
        # verify the required parameter 'redirect_uri' is set
        if ('redirect_uri' not in params or
                params['redirect_uri'] is None):
            raise ValueError("Missing the required parameter `redirect_uri` when calling `oauth_authorize_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_key' in params:
            query_params.append(('client_key', params['client_key']))  # noqa: E501
        if 'response_type' in params:
            query_params.append(('response_type', params['response_type']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'redirect_uri' in params:
            query_params.append(('redirect_uri', params['redirect_uri']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oauth/authorize/v2/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
