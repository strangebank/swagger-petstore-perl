# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse200DataList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rank': 'int',
        'nick_name': 'str',
        'tags': 'list[str]',
        'follower': 'int',
        'score': 'float',
        'unique_id': 'str'
    }

    attribute_map = {
        'rank': 'rank',
        'nick_name': 'nick_name',
        'tags': 'tags',
        'follower': 'follower',
        'score': 'score',
        'unique_id': 'unique_id'
    }

    def __init__(self, rank=None, nick_name=None, tags=None, follower=None, score=None, unique_id=None):  # noqa: E501
        """InlineResponse200DataList - a model defined in Swagger"""  # noqa: E501
        self._rank = None
        self._nick_name = None
        self._tags = None
        self._follower = None
        self._score = None
        self._unique_id = None
        self.discriminator = None
        self.rank = rank
        self.nick_name = nick_name
        self.tags = tags
        self.follower = follower
        self.score = score
        if unique_id is not None:
            self.unique_id = unique_id

    @property
    def rank(self):
        """Gets the rank of this InlineResponse200DataList.  # noqa: E501

        热榜排名  # noqa: E501

        :return: The rank of this InlineResponse200DataList.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this InlineResponse200DataList.

        热榜排名  # noqa: E501

        :param rank: The rank of this InlineResponse200DataList.  # noqa: E501
        :type: int
        """
        if rank is None:
            raise ValueError("Invalid value for `rank`, must not be `None`")  # noqa: E501

        self._rank = rank

    @property
    def nick_name(self):
        """Gets the nick_name of this InlineResponse200DataList.  # noqa: E501

        达人昵称  # noqa: E501

        :return: The nick_name of this InlineResponse200DataList.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this InlineResponse200DataList.

        达人昵称  # noqa: E501

        :param nick_name: The nick_name of this InlineResponse200DataList.  # noqa: E501
        :type: str
        """
        if nick_name is None:
            raise ValueError("Invalid value for `nick_name`, must not be `None`")  # noqa: E501

        self._nick_name = nick_name

    @property
    def tags(self):
        """Gets the tags of this InlineResponse200DataList.  # noqa: E501


        :return: The tags of this InlineResponse200DataList.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InlineResponse200DataList.


        :param tags: The tags of this InlineResponse200DataList.  # noqa: E501
        :type: list[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def follower(self):
        """Gets the follower of this InlineResponse200DataList.  # noqa: E501

        粉丝数  # noqa: E501

        :return: The follower of this InlineResponse200DataList.  # noqa: E501
        :rtype: int
        """
        return self._follower

    @follower.setter
    def follower(self, follower):
        """Sets the follower of this InlineResponse200DataList.

        粉丝数  # noqa: E501

        :param follower: The follower of this InlineResponse200DataList.  # noqa: E501
        :type: int
        """
        if follower is None:
            raise ValueError("Invalid value for `follower`, must not be `None`")  # noqa: E501

        self._follower = follower

    @property
    def score(self):
        """Gets the score of this InlineResponse200DataList.  # noqa: E501

        热榜类型对应的热榜指数  # noqa: E501

        :return: The score of this InlineResponse200DataList.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this InlineResponse200DataList.

        热榜类型对应的热榜指数  # noqa: E501

        :param score: The score of this InlineResponse200DataList.  # noqa: E501
        :type: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def unique_id(self):
        """Gets the unique_id of this InlineResponse200DataList.  # noqa: E501

        抖音号  # noqa: E501

        :return: The unique_id of this InlineResponse200DataList.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this InlineResponse200DataList.

        抖音号  # noqa: E501

        :param unique_id: The unique_id of this InlineResponse200DataList.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200DataList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200DataList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
