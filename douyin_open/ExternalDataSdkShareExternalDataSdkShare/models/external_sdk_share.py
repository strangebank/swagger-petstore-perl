# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ExternalSdkShare(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'share_user_count': 'int',
        'share_item_count': 'int',
        'share_item_total': 'int',
        'delete_item_total': 'int'
    }

    attribute_map = {
        '_date': 'date',
        'share_user_count': 'share_user_count',
        'share_item_count': 'share_item_count',
        'share_item_total': 'share_item_total',
        'delete_item_total': 'delete_item_total'
    }

    def __init__(self, _date=None, share_user_count=None, share_item_count=None, share_item_total=None, delete_item_total=None):  # noqa: E501
        """ExternalSdkShare - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._share_user_count = None
        self._share_item_count = None
        self._share_item_total = None
        self._delete_item_total = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if share_user_count is not None:
            self.share_user_count = share_user_count
        if share_item_count is not None:
            self.share_item_count = share_item_count
        if share_item_total is not None:
            self.share_item_total = share_item_total
        if delete_item_total is not None:
            self.delete_item_total = delete_item_total

    @property
    def _date(self):
        """Gets the _date of this ExternalSdkShare.  # noqa: E501

        日期  # noqa: E501

        :return: The _date of this ExternalSdkShare.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ExternalSdkShare.

        日期  # noqa: E501

        :param _date: The _date of this ExternalSdkShare.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def share_user_count(self):
        """Gets the share_user_count of this ExternalSdkShare.  # noqa: E501

        当日完成分享的用户数  # noqa: E501

        :return: The share_user_count of this ExternalSdkShare.  # noqa: E501
        :rtype: int
        """
        return self._share_user_count

    @share_user_count.setter
    def share_user_count(self, share_user_count):
        """Sets the share_user_count of this ExternalSdkShare.

        当日完成分享的用户数  # noqa: E501

        :param share_user_count: The share_user_count of this ExternalSdkShare.  # noqa: E501
        :type: int
        """

        self._share_user_count = share_user_count

    @property
    def share_item_count(self):
        """Gets the share_item_count of this ExternalSdkShare.  # noqa: E501

        当日分享到抖音的视频数  # noqa: E501

        :return: The share_item_count of this ExternalSdkShare.  # noqa: E501
        :rtype: int
        """
        return self._share_item_count

    @share_item_count.setter
    def share_item_count(self, share_item_count):
        """Sets the share_item_count of this ExternalSdkShare.

        当日分享到抖音的视频数  # noqa: E501

        :param share_item_count: The share_item_count of this ExternalSdkShare.  # noqa: E501
        :type: int
        """

        self._share_item_count = share_item_count

    @property
    def share_item_total(self):
        """Gets the share_item_total of this ExternalSdkShare.  # noqa: E501

        累计分享到抖音的视频总数  # noqa: E501

        :return: The share_item_total of this ExternalSdkShare.  # noqa: E501
        :rtype: int
        """
        return self._share_item_total

    @share_item_total.setter
    def share_item_total(self, share_item_total):
        """Sets the share_item_total of this ExternalSdkShare.

        累计分享到抖音的视频总数  # noqa: E501

        :param share_item_total: The share_item_total of this ExternalSdkShare.  # noqa: E501
        :type: int
        """

        self._share_item_total = share_item_total

    @property
    def delete_item_total(self):
        """Gets the delete_item_total of this ExternalSdkShare.  # noqa: E501

        累计分享到抖音内且状态已被删除的视频总数  # noqa: E501

        :return: The delete_item_total of this ExternalSdkShare.  # noqa: E501
        :rtype: int
        """
        return self._delete_item_total

    @delete_item_total.setter
    def delete_item_total(self, delete_item_total):
        """Sets the delete_item_total of this ExternalSdkShare.

        累计分享到抖音内且状态已被删除的视频总数  # noqa: E501

        :param delete_item_total: The delete_item_total of this ExternalSdkShare.  # noqa: E501
        :type: int
        """

        self._delete_item_total = delete_item_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalSdkShare, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalSdkShare):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
