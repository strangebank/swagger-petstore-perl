# coding: utf-8

"""
    查询指定动态消息卡片

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FancyCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_id': 'str',
        'templates': 'list[CardTemplate]',
        'status': 'str',
        'reject_reason': 'str'
    }

    attribute_map = {
        'card_id': 'card_id',
        'templates': 'templates',
        'status': 'status',
        'reject_reason': 'reject_reason'
    }

    def __init__(self, card_id=None, templates=None, status=None, reject_reason=None):  # noqa: E501
        """FancyCard - a model defined in Swagger"""  # noqa: E501
        self._card_id = None
        self._templates = None
        self._status = None
        self._reject_reason = None
        self.discriminator = None
        if card_id is not None:
            self.card_id = card_id
        self.templates = templates
        if status is not None:
            self.status = status
        if reject_reason is not None:
            self.reject_reason = reject_reason

    @property
    def card_id(self):
        """Gets the card_id of this FancyCard.  # noqa: E501

        模版名称  # noqa: E501

        :return: The card_id of this FancyCard.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this FancyCard.

        模版名称  # noqa: E501

        :param card_id: The card_id of this FancyCard.  # noqa: E501
        :type: str
        """

        self._card_id = card_id

    @property
    def templates(self):
        """Gets the templates of this FancyCard.  # noqa: E501


        :return: The templates of this FancyCard.  # noqa: E501
        :rtype: list[CardTemplate]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this FancyCard.


        :param templates: The templates of this FancyCard.  # noqa: E501
        :type: list[CardTemplate]
        """
        if templates is None:
            raise ValueError("Invalid value for `templates`, must not be `None`")  # noqa: E501

        self._templates = templates

    @property
    def status(self):
        """Gets the status of this FancyCard.  # noqa: E501

        审核状态（avaliable可使用,review审核中,reject审核不通过)  # noqa: E501

        :return: The status of this FancyCard.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FancyCard.

        审核状态（avaliable可使用,review审核中,reject审核不通过)  # noqa: E501

        :param status: The status of this FancyCard.  # noqa: E501
        :type: str
        """
        allowed_values = ["available", "review", "reject", ""]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def reject_reason(self):
        """Gets the reject_reason of this FancyCard.  # noqa: E501

        审核不通过原因  # noqa: E501

        :return: The reject_reason of this FancyCard.  # noqa: E501
        :rtype: str
        """
        return self._reject_reason

    @reject_reason.setter
    def reject_reason(self, reject_reason):
        """Sets the reject_reason of this FancyCard.

        审核不通过原因  # noqa: E501

        :param reject_reason: The reject_reason of this FancyCard.  # noqa: E501
        :type: str
        """

        self._reject_reason = reject_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FancyCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FancyCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
