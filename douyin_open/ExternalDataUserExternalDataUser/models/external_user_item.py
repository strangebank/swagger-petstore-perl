# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ExternalUserItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'new_play': 'int',
        'new_issue': 'int',
        'total_issue': 'int'
    }

    attribute_map = {
        '_date': 'date',
        'new_play': 'new_play',
        'new_issue': 'new_issue',
        'total_issue': 'total_issue'
    }

    def __init__(self, _date=None, new_play=None, new_issue=None, total_issue=None):  # noqa: E501
        """ExternalUserItem - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._new_play = None
        self._new_issue = None
        self._total_issue = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if new_play is not None:
            self.new_play = new_play
        if new_issue is not None:
            self.new_issue = new_issue
        if total_issue is not None:
            self.total_issue = total_issue

    @property
    def _date(self):
        """Gets the _date of this ExternalUserItem.  # noqa: E501

        日期  # noqa: E501

        :return: The _date of this ExternalUserItem.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ExternalUserItem.

        日期  # noqa: E501

        :param _date: The _date of this ExternalUserItem.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def new_play(self):
        """Gets the new_play of this ExternalUserItem.  # noqa: E501

        每天新增视频播放  # noqa: E501

        :return: The new_play of this ExternalUserItem.  # noqa: E501
        :rtype: int
        """
        return self._new_play

    @new_play.setter
    def new_play(self, new_play):
        """Sets the new_play of this ExternalUserItem.

        每天新增视频播放  # noqa: E501

        :param new_play: The new_play of this ExternalUserItem.  # noqa: E501
        :type: int
        """

        self._new_play = new_play

    @property
    def new_issue(self):
        """Gets the new_issue of this ExternalUserItem.  # noqa: E501

        每日发布内容数  # noqa: E501

        :return: The new_issue of this ExternalUserItem.  # noqa: E501
        :rtype: int
        """
        return self._new_issue

    @new_issue.setter
    def new_issue(self, new_issue):
        """Sets the new_issue of this ExternalUserItem.

        每日发布内容数  # noqa: E501

        :param new_issue: The new_issue of this ExternalUserItem.  # noqa: E501
        :type: int
        """

        self._new_issue = new_issue

    @property
    def total_issue(self):
        """Gets the total_issue of this ExternalUserItem.  # noqa: E501

        每日内容总数  # noqa: E501

        :return: The total_issue of this ExternalUserItem.  # noqa: E501
        :rtype: int
        """
        return self._total_issue

    @total_issue.setter
    def total_issue(self, total_issue):
        """Sets the total_issue of this ExternalUserItem.

        每日内容总数  # noqa: E501

        :param total_issue: The total_issue of this ExternalUserItem.  # noqa: E501
        :type: int
        """

        self._total_issue = total_issue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalUserItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalUserItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
