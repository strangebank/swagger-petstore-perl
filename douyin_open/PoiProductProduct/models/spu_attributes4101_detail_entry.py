# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SpuAttributes4101DetailEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema_type': 'int',
        'url': 'str',
        'platform_source': 'int',
        'platform_name': 'str',
        'is_test': 'int'
    }

    attribute_map = {
        'schema_type': 'schema_type',
        'url': 'url',
        'platform_source': 'platform_source',
        'platform_name': 'platform_name',
        'is_test': 'is_test'
    }

    def __init__(self, schema_type=None, url=None, platform_source=None, platform_name=None, is_test=None):  # noqa: E501
        """SpuAttributes4101DetailEntry - a model defined in Swagger"""  # noqa: E501
        self._schema_type = None
        self._url = None
        self._platform_source = None
        self._platform_name = None
        self._is_test = None
        self.discriminator = None
        if schema_type is not None:
            self.schema_type = schema_type
        if url is not None:
            self.url = url
        if platform_source is not None:
            self.platform_source = platform_source
        if platform_name is not None:
            self.platform_name = platform_name
        if is_test is not None:
            self.is_test = is_test

    @property
    def schema_type(self):
        """Gets the schema_type of this SpuAttributes4101DetailEntry.  # noqa: E501

        链接类型 (1:H5，2:抖音小程序，3:原生小程序)  # noqa: E501

        :return: The schema_type of this SpuAttributes4101DetailEntry.  # noqa: E501
        :rtype: int
        """
        return self._schema_type

    @schema_type.setter
    def schema_type(self, schema_type):
        """Sets the schema_type of this SpuAttributes4101DetailEntry.

        链接类型 (1:H5，2:抖音小程序，3:原生小程序)  # noqa: E501

        :param schema_type: The schema_type of this SpuAttributes4101DetailEntry.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, ""]  # noqa: E501
        if schema_type not in allowed_values:
            raise ValueError(
                "Invalid value for `schema_type` ({0}), must be one of {1}"  # noqa: E501
                .format(schema_type, allowed_values)
            )

        self._schema_type = schema_type

    @property
    def url(self):
        """Gets the url of this SpuAttributes4101DetailEntry.  # noqa: E501

        详情页链接  # noqa: E501

        :return: The url of this SpuAttributes4101DetailEntry.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SpuAttributes4101DetailEntry.

        详情页链接  # noqa: E501

        :param url: The url of this SpuAttributes4101DetailEntry.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def platform_source(self):
        """Gets the platform_source of this SpuAttributes4101DetailEntry.  # noqa: E501

        平台来源枚举（16电商小店）  # noqa: E501

        :return: The platform_source of this SpuAttributes4101DetailEntry.  # noqa: E501
        :rtype: int
        """
        return self._platform_source

    @platform_source.setter
    def platform_source(self, platform_source):
        """Sets the platform_source of this SpuAttributes4101DetailEntry.

        平台来源枚举（16电商小店）  # noqa: E501

        :param platform_source: The platform_source of this SpuAttributes4101DetailEntry.  # noqa: E501
        :type: int
        """
        allowed_values = [16, ""]  # noqa: E501
        if platform_source not in allowed_values:
            raise ValueError(
                "Invalid value for `platform_source` ({0}), must be one of {1}"  # noqa: E501
                .format(platform_source, allowed_values)
            )

        self._platform_source = platform_source

    @property
    def platform_name(self):
        """Gets the platform_name of this SpuAttributes4101DetailEntry.  # noqa: E501

        平台名称  # noqa: E501

        :return: The platform_name of this SpuAttributes4101DetailEntry.  # noqa: E501
        :rtype: str
        """
        return self._platform_name

    @platform_name.setter
    def platform_name(self, platform_name):
        """Sets the platform_name of this SpuAttributes4101DetailEntry.

        平台名称  # noqa: E501

        :param platform_name: The platform_name of this SpuAttributes4101DetailEntry.  # noqa: E501
        :type: str
        """

        self._platform_name = platform_name

    @property
    def is_test(self):
        """Gets the is_test of this SpuAttributes4101DetailEntry.  # noqa: E501

        主要用于联调，1-使用测试版的小程序，0或者不填-使用正式版小程序  # noqa: E501

        :return: The is_test of this SpuAttributes4101DetailEntry.  # noqa: E501
        :rtype: int
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this SpuAttributes4101DetailEntry.

        主要用于联调，1-使用测试版的小程序，0或者不填-使用正式版小程序  # noqa: E501

        :param is_test: The is_test of this SpuAttributes4101DetailEntry.  # noqa: E501
        :type: int
        """

        self._is_test = is_test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpuAttributes4101DetailEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpuAttributes4101DetailEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
