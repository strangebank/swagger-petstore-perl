# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SpuAttributes4101(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market_price': 'int',
        'discount_price': 'int',
        'img': 'str',
        'selled_num': 'int',
        'detail_entry': 'SpuAttributes4101DetailEntry'
    }

    attribute_map = {
        'market_price': 'market_price',
        'discount_price': 'discount_price',
        'img': 'img',
        'selled_num': 'selled_num',
        'detail_entry': 'detail_entry'
    }

    def __init__(self, market_price=None, discount_price=None, img=None, selled_num=None, detail_entry=None):  # noqa: E501
        """SpuAttributes4101 - a model defined in Swagger"""  # noqa: E501
        self._market_price = None
        self._discount_price = None
        self._img = None
        self._selled_num = None
        self._detail_entry = None
        self.discriminator = None
        if market_price is not None:
            self.market_price = market_price
        if discount_price is not None:
            self.discount_price = discount_price
        if img is not None:
            self.img = img
        if selled_num is not None:
            self.selled_num = selled_num
        if detail_entry is not None:
            self.detail_entry = detail_entry

    @property
    def market_price(self):
        """Gets the market_price of this SpuAttributes4101.  # noqa: E501

        原价 单位：分  # noqa: E501

        :return: The market_price of this SpuAttributes4101.  # noqa: E501
        :rtype: int
        """
        return self._market_price

    @market_price.setter
    def market_price(self, market_price):
        """Sets the market_price of this SpuAttributes4101.

        原价 单位：分  # noqa: E501

        :param market_price: The market_price of this SpuAttributes4101.  # noqa: E501
        :type: int
        """

        self._market_price = market_price

    @property
    def discount_price(self):
        """Gets the discount_price of this SpuAttributes4101.  # noqa: E501

        售价 单位：分  # noqa: E501

        :return: The discount_price of this SpuAttributes4101.  # noqa: E501
        :rtype: int
        """
        return self._discount_price

    @discount_price.setter
    def discount_price(self, discount_price):
        """Sets the discount_price of this SpuAttributes4101.

        售价 单位：分  # noqa: E501

        :param discount_price: The discount_price of this SpuAttributes4101.  # noqa: E501
        :type: int
        """

        self._discount_price = discount_price

    @property
    def img(self):
        """Gets the img of this SpuAttributes4101.  # noqa: E501

        商品图片  # noqa: E501

        :return: The img of this SpuAttributes4101.  # noqa: E501
        :rtype: str
        """
        return self._img

    @img.setter
    def img(self, img):
        """Sets the img of this SpuAttributes4101.

        商品图片  # noqa: E501

        :param img: The img of this SpuAttributes4101.  # noqa: E501
        :type: str
        """

        self._img = img

    @property
    def selled_num(self):
        """Gets the selled_num of this SpuAttributes4101.  # noqa: E501

        销量  # noqa: E501

        :return: The selled_num of this SpuAttributes4101.  # noqa: E501
        :rtype: int
        """
        return self._selled_num

    @selled_num.setter
    def selled_num(self, selled_num):
        """Sets the selled_num of this SpuAttributes4101.

        销量  # noqa: E501

        :param selled_num: The selled_num of this SpuAttributes4101.  # noqa: E501
        :type: int
        """

        self._selled_num = selled_num

    @property
    def detail_entry(self):
        """Gets the detail_entry of this SpuAttributes4101.  # noqa: E501


        :return: The detail_entry of this SpuAttributes4101.  # noqa: E501
        :rtype: SpuAttributes4101DetailEntry
        """
        return self._detail_entry

    @detail_entry.setter
    def detail_entry(self, detail_entry):
        """Sets the detail_entry of this SpuAttributes4101.


        :param detail_entry: The detail_entry of this SpuAttributes4101.  # noqa: E501
        :type: SpuAttributes4101DetailEntry
        """

        self._detail_entry = detail_entry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpuAttributes4101, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpuAttributes4101):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
