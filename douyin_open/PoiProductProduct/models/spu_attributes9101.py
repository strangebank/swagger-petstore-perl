# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SpuAttributes9101(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market_price': 'int',
        'img': 'str',
        'sub_title': 'str',
        'tag_list': 'list[SpuAttributes9101TagList]'
    }

    attribute_map = {
        'market_price': 'market_price',
        'img': 'img',
        'sub_title': 'sub_title',
        'tag_list': 'tag_list'
    }

    def __init__(self, market_price=None, img=None, sub_title=None, tag_list=None):  # noqa: E501
        """SpuAttributes9101 - a model defined in Swagger"""  # noqa: E501
        self._market_price = None
        self._img = None
        self._sub_title = None
        self._tag_list = None
        self.discriminator = None
        if market_price is not None:
            self.market_price = market_price
        if img is not None:
            self.img = img
        if sub_title is not None:
            self.sub_title = sub_title
        if tag_list is not None:
            self.tag_list = tag_list

    @property
    def market_price(self):
        """Gets the market_price of this SpuAttributes9101.  # noqa: E501

        原价 单位：分  # noqa: E501

        :return: The market_price of this SpuAttributes9101.  # noqa: E501
        :rtype: int
        """
        return self._market_price

    @market_price.setter
    def market_price(self, market_price):
        """Sets the market_price of this SpuAttributes9101.

        原价 单位：分  # noqa: E501

        :param market_price: The market_price of this SpuAttributes9101.  # noqa: E501
        :type: int
        """

        self._market_price = market_price

    @property
    def img(self):
        """Gets the img of this SpuAttributes9101.  # noqa: E501

        商品图片  # noqa: E501

        :return: The img of this SpuAttributes9101.  # noqa: E501
        :rtype: str
        """
        return self._img

    @img.setter
    def img(self, img):
        """Sets the img of this SpuAttributes9101.

        商品图片  # noqa: E501

        :param img: The img of this SpuAttributes9101.  # noqa: E501
        :type: str
        """

        self._img = img

    @property
    def sub_title(self):
        """Gets the sub_title of this SpuAttributes9101.  # noqa: E501

        副标题  # noqa: E501

        :return: The sub_title of this SpuAttributes9101.  # noqa: E501
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title):
        """Sets the sub_title of this SpuAttributes9101.

        副标题  # noqa: E501

        :param sub_title: The sub_title of this SpuAttributes9101.  # noqa: E501
        :type: str
        """

        self._sub_title = sub_title

    @property
    def tag_list(self):
        """Gets the tag_list of this SpuAttributes9101.  # noqa: E501

        团购券标签  # noqa: E501

        :return: The tag_list of this SpuAttributes9101.  # noqa: E501
        :rtype: list[SpuAttributes9101TagList]
        """
        return self._tag_list

    @tag_list.setter
    def tag_list(self, tag_list):
        """Sets the tag_list of this SpuAttributes9101.

        团购券标签  # noqa: E501

        :param tag_list: The tag_list of this SpuAttributes9101.  # noqa: E501
        :type: list[SpuAttributes9101TagList]
        """

        self._tag_list = tag_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpuAttributes9101, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpuAttributes9101):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
