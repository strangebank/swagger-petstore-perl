# coding: utf-8

"""
    团购活动订单汇总信息

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class OrderOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'amount': 'int',
        'source_count': 'list[OrderOverviewSourceCount]'
    }

    attribute_map = {
        'count': 'count',
        'amount': 'amount',
        'source_count': 'source_count'
    }

    def __init__(self, count=None, amount=None, source_count=None):  # noqa: E501
        """OrderOverview - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._amount = None
        self._source_count = None
        self.discriminator = None
        self.count = count
        self.amount = amount
        self.source_count = source_count

    @property
    def count(self):
        """Gets the count of this OrderOverview.  # noqa: E501

        订单数量  # noqa: E501

        :return: The count of this OrderOverview.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this OrderOverview.

        订单数量  # noqa: E501

        :param count: The count of this OrderOverview.  # noqa: E501
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def amount(self):
        """Gets the amount of this OrderOverview.  # noqa: E501

        订单金额  # noqa: E501

        :return: The amount of this OrderOverview.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OrderOverview.

        订单金额  # noqa: E501

        :param amount: The amount of this OrderOverview.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def source_count(self):
        """Gets the source_count of this OrderOverview.  # noqa: E501

        订单来源统计  # noqa: E501

        :return: The source_count of this OrderOverview.  # noqa: E501
        :rtype: list[OrderOverviewSourceCount]
        """
        return self._source_count

    @source_count.setter
    def source_count(self, source_count):
        """Sets the source_count of this OrderOverview.

        订单来源统计  # noqa: E501

        :param source_count: The source_count of this OrderOverview.  # noqa: E501
        :type: list[OrderOverviewSourceCount]
        """
        if source_count is None:
            raise ValueError("Invalid value for `source_count`, must not be `None`")  # noqa: E501

        self._source_count = source_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
