# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ExternalItemBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_play': 'int',
        'total_like': 'int',
        'total_comment': 'int',
        'total_share': 'int',
        'avg_play_duration': 'float'
    }

    attribute_map = {
        'total_play': 'total_play',
        'total_like': 'total_like',
        'total_comment': 'total_comment',
        'total_share': 'total_share',
        'avg_play_duration': 'avg_play_duration'
    }

    def __init__(self, total_play=None, total_like=None, total_comment=None, total_share=None, avg_play_duration=None):  # noqa: E501
        """ExternalItemBase - a model defined in Swagger"""  # noqa: E501
        self._total_play = None
        self._total_like = None
        self._total_comment = None
        self._total_share = None
        self._avg_play_duration = None
        self.discriminator = None
        if total_play is not None:
            self.total_play = total_play
        if total_like is not None:
            self.total_like = total_like
        if total_comment is not None:
            self.total_comment = total_comment
        if total_share is not None:
            self.total_share = total_share
        if avg_play_duration is not None:
            self.avg_play_duration = avg_play_duration

    @property
    def total_play(self):
        """Gets the total_play of this ExternalItemBase.  # noqa: E501

        30天播放次数  # noqa: E501

        :return: The total_play of this ExternalItemBase.  # noqa: E501
        :rtype: int
        """
        return self._total_play

    @total_play.setter
    def total_play(self, total_play):
        """Sets the total_play of this ExternalItemBase.

        30天播放次数  # noqa: E501

        :param total_play: The total_play of this ExternalItemBase.  # noqa: E501
        :type: int
        """

        self._total_play = total_play

    @property
    def total_like(self):
        """Gets the total_like of this ExternalItemBase.  # noqa: E501

        30天点赞数  # noqa: E501

        :return: The total_like of this ExternalItemBase.  # noqa: E501
        :rtype: int
        """
        return self._total_like

    @total_like.setter
    def total_like(self, total_like):
        """Sets the total_like of this ExternalItemBase.

        30天点赞数  # noqa: E501

        :param total_like: The total_like of this ExternalItemBase.  # noqa: E501
        :type: int
        """

        self._total_like = total_like

    @property
    def total_comment(self):
        """Gets the total_comment of this ExternalItemBase.  # noqa: E501

        30天评论数  # noqa: E501

        :return: The total_comment of this ExternalItemBase.  # noqa: E501
        :rtype: int
        """
        return self._total_comment

    @total_comment.setter
    def total_comment(self, total_comment):
        """Sets the total_comment of this ExternalItemBase.

        30天评论数  # noqa: E501

        :param total_comment: The total_comment of this ExternalItemBase.  # noqa: E501
        :type: int
        """

        self._total_comment = total_comment

    @property
    def total_share(self):
        """Gets the total_share of this ExternalItemBase.  # noqa: E501

        30天分享数  # noqa: E501

        :return: The total_share of this ExternalItemBase.  # noqa: E501
        :rtype: int
        """
        return self._total_share

    @total_share.setter
    def total_share(self, total_share):
        """Sets the total_share of this ExternalItemBase.

        30天分享数  # noqa: E501

        :param total_share: The total_share of this ExternalItemBase.  # noqa: E501
        :type: int
        """

        self._total_share = total_share

    @property
    def avg_play_duration(self):
        """Gets the avg_play_duration of this ExternalItemBase.  # noqa: E501

        30天平均播放时长  # noqa: E501

        :return: The avg_play_duration of this ExternalItemBase.  # noqa: E501
        :rtype: float
        """
        return self._avg_play_duration

    @avg_play_duration.setter
    def avg_play_duration(self, avg_play_duration):
        """Sets the avg_play_duration of this ExternalItemBase.

        30天平均播放时长  # noqa: E501

        :param avg_play_duration: The avg_play_duration of this ExternalItemBase.  # noqa: E501
        :type: float
        """

        self._avg_play_duration = avg_play_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalItemBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalItemBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
