# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Album(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'name_en': 'str',
        'poster': 'str',
        'release_date': 'str',
        'hot': 'int',
        'type': 'int',
        'maoyan_id': 'str',
        'areas': 'list[str]',
        'tags': 'list[str]',
        'directors': 'list[str]',
        'actors': 'list[str]',
        'influence_hot': 'int',
        'discussion_hot': 'int',
        'topic_hot': 'int',
        'search_hot': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'name_en': 'name_en',
        'poster': 'poster',
        'release_date': 'release_date',
        'hot': 'hot',
        'type': 'type',
        'maoyan_id': 'maoyan_id',
        'areas': 'areas',
        'tags': 'tags',
        'directors': 'directors',
        'actors': 'actors',
        'influence_hot': 'influence_hot',
        'discussion_hot': 'discussion_hot',
        'topic_hot': 'topic_hot',
        'search_hot': 'search_hot'
    }

    def __init__(self, id=None, name=None, name_en=None, poster=None, release_date=None, hot=None, type=None, maoyan_id=None, areas=None, tags=None, directors=None, actors=None, influence_hot=None, discussion_hot=None, topic_hot=None, search_hot=None):  # noqa: E501
        """Album - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._name_en = None
        self._poster = None
        self._release_date = None
        self._hot = None
        self._type = None
        self._maoyan_id = None
        self._areas = None
        self._tags = None
        self._directors = None
        self._actors = None
        self._influence_hot = None
        self._discussion_hot = None
        self._topic_hot = None
        self._search_hot = None
        self.discriminator = None
        self.id = id
        self.name = name
        if name_en is not None:
            self.name_en = name_en
        self.poster = poster
        self.release_date = release_date
        self.hot = hot
        self.type = type
        if maoyan_id is not None:
            self.maoyan_id = maoyan_id
        if areas is not None:
            self.areas = areas
        if tags is not None:
            self.tags = tags
        if directors is not None:
            self.directors = directors
        if actors is not None:
            self.actors = actors
        if influence_hot is not None:
            self.influence_hot = influence_hot
        if discussion_hot is not None:
            self.discussion_hot = discussion_hot
        if topic_hot is not None:
            self.topic_hot = topic_hot
        if search_hot is not None:
            self.search_hot = search_hot

    @property
    def id(self):
        """Gets the id of this Album.  # noqa: E501

        影片ID  # noqa: E501

        :return: The id of this Album.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Album.

        影片ID  # noqa: E501

        :param id: The id of this Album.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Album.  # noqa: E501

        片名  # noqa: E501

        :return: The name of this Album.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Album.

        片名  # noqa: E501

        :param name: The name of this Album.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def name_en(self):
        """Gets the name_en of this Album.  # noqa: E501

        英文片名  # noqa: E501

        :return: The name_en of this Album.  # noqa: E501
        :rtype: str
        """
        return self._name_en

    @name_en.setter
    def name_en(self, name_en):
        """Sets the name_en of this Album.

        英文片名  # noqa: E501

        :param name_en: The name_en of this Album.  # noqa: E501
        :type: str
        """

        self._name_en = name_en

    @property
    def poster(self):
        """Gets the poster of this Album.  # noqa: E501

        海报  # noqa: E501

        :return: The poster of this Album.  # noqa: E501
        :rtype: str
        """
        return self._poster

    @poster.setter
    def poster(self, poster):
        """Sets the poster of this Album.

        海报  # noqa: E501

        :param poster: The poster of this Album.  # noqa: E501
        :type: str
        """
        if poster is None:
            raise ValueError("Invalid value for `poster`, must not be `None`")  # noqa: E501

        self._poster = poster

    @property
    def release_date(self):
        """Gets the release_date of this Album.  # noqa: E501

        上映时间  # noqa: E501

        :return: The release_date of this Album.  # noqa: E501
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this Album.

        上映时间  # noqa: E501

        :param release_date: The release_date of this Album.  # noqa: E501
        :type: str
        """
        if release_date is None:
            raise ValueError("Invalid value for `release_date`, must not be `None`")  # noqa: E501

        self._release_date = release_date

    @property
    def hot(self):
        """Gets the hot of this Album.  # noqa: E501

        热度值  # noqa: E501

        :return: The hot of this Album.  # noqa: E501
        :rtype: int
        """
        return self._hot

    @hot.setter
    def hot(self, hot):
        """Sets the hot of this Album.

        热度值  # noqa: E501

        :param hot: The hot of this Album.  # noqa: E501
        :type: int
        """
        if hot is None:
            raise ValueError("Invalid value for `hot`, must not be `None`")  # noqa: E501

        self._hot = hot

    @property
    def type(self):
        """Gets the type of this Album.  # noqa: E501

        类型：1=电影 2=电视剧 3=综艺  # noqa: E501

        :return: The type of this Album.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Album.

        类型：1=电影 2=电视剧 3=综艺  # noqa: E501

        :param type: The type of this Album.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def maoyan_id(self):
        """Gets the maoyan_id of this Album.  # noqa: E501

        猫眼id：只有电影榜返回，可能为空  # noqa: E501

        :return: The maoyan_id of this Album.  # noqa: E501
        :rtype: str
        """
        return self._maoyan_id

    @maoyan_id.setter
    def maoyan_id(self, maoyan_id):
        """Sets the maoyan_id of this Album.

        猫眼id：只有电影榜返回，可能为空  # noqa: E501

        :param maoyan_id: The maoyan_id of this Album.  # noqa: E501
        :type: str
        """

        self._maoyan_id = maoyan_id

    @property
    def areas(self):
        """Gets the areas of this Album.  # noqa: E501

        地区  # noqa: E501

        :return: The areas of this Album.  # noqa: E501
        :rtype: list[str]
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this Album.

        地区  # noqa: E501

        :param areas: The areas of this Album.  # noqa: E501
        :type: list[str]
        """

        self._areas = areas

    @property
    def tags(self):
        """Gets the tags of this Album.  # noqa: E501

        类型标签  # noqa: E501

        :return: The tags of this Album.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Album.

        类型标签  # noqa: E501

        :param tags: The tags of this Album.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def directors(self):
        """Gets the directors of this Album.  # noqa: E501

        导演  # noqa: E501

        :return: The directors of this Album.  # noqa: E501
        :rtype: list[str]
        """
        return self._directors

    @directors.setter
    def directors(self, directors):
        """Sets the directors of this Album.

        导演  # noqa: E501

        :param directors: The directors of this Album.  # noqa: E501
        :type: list[str]
        """

        self._directors = directors

    @property
    def actors(self):
        """Gets the actors of this Album.  # noqa: E501

        演员  # noqa: E501

        :return: The actors of this Album.  # noqa: E501
        :rtype: list[str]
        """
        return self._actors

    @actors.setter
    def actors(self, actors):
        """Sets the actors of this Album.

        演员  # noqa: E501

        :param actors: The actors of this Album.  # noqa: E501
        :type: list[str]
        """

        self._actors = actors

    @property
    def influence_hot(self):
        """Gets the influence_hot of this Album.  # noqa: E501

        账号影响力  # noqa: E501

        :return: The influence_hot of this Album.  # noqa: E501
        :rtype: int
        """
        return self._influence_hot

    @influence_hot.setter
    def influence_hot(self, influence_hot):
        """Sets the influence_hot of this Album.

        账号影响力  # noqa: E501

        :param influence_hot: The influence_hot of this Album.  # noqa: E501
        :type: int
        """

        self._influence_hot = influence_hot

    @property
    def discussion_hot(self):
        """Gets the discussion_hot of this Album.  # noqa: E501

        视频讨论度  # noqa: E501

        :return: The discussion_hot of this Album.  # noqa: E501
        :rtype: int
        """
        return self._discussion_hot

    @discussion_hot.setter
    def discussion_hot(self, discussion_hot):
        """Sets the discussion_hot of this Album.

        视频讨论度  # noqa: E501

        :param discussion_hot: The discussion_hot of this Album.  # noqa: E501
        :type: int
        """

        self._discussion_hot = discussion_hot

    @property
    def topic_hot(self):
        """Gets the topic_hot of this Album.  # noqa: E501

        话题热度值  # noqa: E501

        :return: The topic_hot of this Album.  # noqa: E501
        :rtype: int
        """
        return self._topic_hot

    @topic_hot.setter
    def topic_hot(self, topic_hot):
        """Sets the topic_hot of this Album.

        话题热度值  # noqa: E501

        :param topic_hot: The topic_hot of this Album.  # noqa: E501
        :type: int
        """

        self._topic_hot = topic_hot

    @property
    def search_hot(self):
        """Gets the search_hot of this Album.  # noqa: E501

        搜索指数  # noqa: E501

        :return: The search_hot of this Album.  # noqa: E501
        :rtype: int
        """
        return self._search_hot

    @search_hot.setter
    def search_hot(self, search_hot):
        """Sets the search_hot of this Album.

        搜索指数  # noqa: E501

        :param search_hot: The search_hot of this Album.  # noqa: E501
        :type: int
        """

        self._search_hot = search_hot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Album, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Album):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
