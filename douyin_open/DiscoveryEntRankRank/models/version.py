# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Version(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'int',
        'version': 'int',
        'start_time': 'str',
        'end_time': 'str',
        'active_time': 'str'
    }

    attribute_map = {
        'type': 'type',
        'version': 'version',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'active_time': 'active_time'
    }

    def __init__(self, type=None, version=None, start_time=None, end_time=None, active_time=None):  # noqa: E501
        """Version - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._version = None
        self._start_time = None
        self._end_time = None
        self._active_time = None
        self.discriminator = None
        self.type = type
        self.version = version
        self.start_time = start_time
        self.end_time = end_time
        self.active_time = active_time

    @property
    def type(self):
        """Gets the type of this Version.  # noqa: E501

        类型：1=电影 2=电视剧 3=综艺  # noqa: E501

        :return: The type of this Version.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Version.

        类型：1=电影 2=电视剧 3=综艺  # noqa: E501

        :param type: The type of this Version.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def version(self):
        """Gets the version of this Version.  # noqa: E501

        榜单版本  # noqa: E501

        :return: The version of this Version.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Version.

        榜单版本  # noqa: E501

        :param version: The version of this Version.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def start_time(self):
        """Gets the start_time of this Version.  # noqa: E501

        榜单起始时间  # noqa: E501

        :return: The start_time of this Version.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Version.

        榜单起始时间  # noqa: E501

        :param start_time: The start_time of this Version.  # noqa: E501
        :type: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this Version.  # noqa: E501

        榜单结束时间  # noqa: E501

        :return: The end_time of this Version.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Version.

        榜单结束时间  # noqa: E501

        :param end_time: The end_time of this Version.  # noqa: E501
        :type: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def active_time(self):
        """Gets the active_time of this Version.  # noqa: E501

        榜单生成时间  # noqa: E501

        :return: The active_time of this Version.  # noqa: E501
        :rtype: str
        """
        return self._active_time

    @active_time.setter
    def active_time(self, active_time):
        """Sets the active_time of this Version.

        榜单生成时间  # noqa: E501

        :param active_time: The active_time of this Version.  # noqa: E501
        :type: str
        """
        if active_time is None:
            raise ValueError("Invalid value for `active_time`, must not be `None`")  # noqa: E501

        self._active_time = active_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Version, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Version):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
