# coding: utf-8

"""
    创建动态消息卡片

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CardTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_key': 'str',
        'modules': 'list[CardModule]',
        'props': 'str'
    }

    attribute_map = {
        'template_key': 'template_key',
        'modules': 'modules',
        'props': 'props'
    }

    def __init__(self, template_key=None, modules=None, props=None):  # noqa: E501
        """CardTemplate - a model defined in Swagger"""  # noqa: E501
        self._template_key = None
        self._modules = None
        self._props = None
        self.discriminator = None
        self.template_key = template_key
        self.modules = modules
        if props is not None:
            self.props = props

    @property
    def template_key(self):
        """Gets the template_key of this CardTemplate.  # noqa: E501

        模版key  # noqa: E501

        :return: The template_key of this CardTemplate.  # noqa: E501
        :rtype: str
        """
        return self._template_key

    @template_key.setter
    def template_key(self, template_key):
        """Sets the template_key of this CardTemplate.

        模版key  # noqa: E501

        :param template_key: The template_key of this CardTemplate.  # noqa: E501
        :type: str
        """
        if template_key is None:
            raise ValueError("Invalid value for `template_key`, must not be `None`")  # noqa: E501

        self._template_key = template_key

    @property
    def modules(self):
        """Gets the modules of this CardTemplate.  # noqa: E501

        卡片模块列表  # noqa: E501

        :return: The modules of this CardTemplate.  # noqa: E501
        :rtype: list[CardModule]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this CardTemplate.

        卡片模块列表  # noqa: E501

        :param modules: The modules of this CardTemplate.  # noqa: E501
        :type: list[CardModule]
        """
        if modules is None:
            raise ValueError("Invalid value for `modules`, must not be `None`")  # noqa: E501

        self._modules = modules

    @property
    def props(self):
        """Gets the props of this CardTemplate.  # noqa: E501

        卡片属性 json string  # noqa: E501

        :return: The props of this CardTemplate.  # noqa: E501
        :rtype: str
        """
        return self._props

    @props.setter
    def props(self, props):
        """Sets the props of this CardTemplate.

        卡片属性 json string  # noqa: E501

        :param props: The props of this CardTemplate.  # noqa: E501
        :type: str
        """

        self._props = props

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
