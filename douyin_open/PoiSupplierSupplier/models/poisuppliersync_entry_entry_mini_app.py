# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PoisuppliersyncEntryEntryMiniApp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'path': 'str',
        'params': 'str',
        'is_test': 'int'
    }

    attribute_map = {
        'app_id': 'app_id',
        'path': 'path',
        'params': 'params',
        'is_test': 'is_test'
    }

    def __init__(self, app_id=None, path=None, params=None, is_test=None):  # noqa: E501
        """PoisuppliersyncEntryEntryMiniApp - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._path = None
        self._params = None
        self._is_test = None
        self.discriminator = None
        if app_id is not None:
            self.app_id = app_id
        if path is not None:
            self.path = path
        if params is not None:
            self.params = params
        if is_test is not None:
            self.is_test = is_test

    @property
    def app_id(self):
        """Gets the app_id of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501

        小程序的appid  # noqa: E501

        :return: The app_id of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this PoisuppliersyncEntryEntryMiniApp.

        小程序的appid  # noqa: E501

        :param app_id: The app_id of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def path(self):
        """Gets the path of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501

        服务路径  # noqa: E501

        :return: The path of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PoisuppliersyncEntryEntryMiniApp.

        服务路径  # noqa: E501

        :param path: The path of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def params(self):
        """Gets the params of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501

        服务参数json  # noqa: E501

        :return: The params of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this PoisuppliersyncEntryEntryMiniApp.

        服务参数json  # noqa: E501

        :param params: The params of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501
        :type: str
        """

        self._params = params

    @property
    def is_test(self):
        """Gets the is_test of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501

        主要用于联调，1-使用测试版的小程序，0或者不填-使用正式版小程序  # noqa: E501

        :return: The is_test of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501
        :rtype: int
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this PoisuppliersyncEntryEntryMiniApp.

        主要用于联调，1-使用测试版的小程序，0或者不填-使用正式版小程序  # noqa: E501

        :param is_test: The is_test of this PoisuppliersyncEntryEntryMiniApp.  # noqa: E501
        :type: int
        """

        self._is_test = is_test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoisuppliersyncEntryEntryMiniApp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoisuppliersyncEntryEntryMiniApp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
