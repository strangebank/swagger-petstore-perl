# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SupplierAttributes3101(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'open_time': 'str',
        'open_time_ext': 'list[NodeStruct]',
        'preferential_policy': 'list[SupplierAttributes3101PreferentialPolicy]',
        'preferential_policy_ext': 'list[NodeStruct]',
        'facility': 'list[SupplierAttributes3101Facility]',
        'play_intro': 'list[NodeStruct]',
        'traffic': 'list[NodeStruct]',
        'pet': 'int',
        'scenic_intro': 'list[NodeStruct]'
    }

    attribute_map = {
        'open_time': 'open_time',
        'open_time_ext': 'open_time_ext',
        'preferential_policy': 'preferential_policy',
        'preferential_policy_ext': 'preferential_policy_ext',
        'facility': 'facility',
        'play_intro': 'play_intro',
        'traffic': 'traffic',
        'pet': 'pet',
        'scenic_intro': 'scenic_intro'
    }

    def __init__(self, open_time=None, open_time_ext=None, preferential_policy=None, preferential_policy_ext=None, facility=None, play_intro=None, traffic=None, pet=None, scenic_intro=None):  # noqa: E501
        """SupplierAttributes3101 - a model defined in Swagger"""  # noqa: E501
        self._open_time = None
        self._open_time_ext = None
        self._preferential_policy = None
        self._preferential_policy_ext = None
        self._facility = None
        self._play_intro = None
        self._traffic = None
        self._pet = None
        self._scenic_intro = None
        self.discriminator = None
        if open_time is not None:
            self.open_time = open_time
        if open_time_ext is not None:
            self.open_time_ext = open_time_ext
        if preferential_policy is not None:
            self.preferential_policy = preferential_policy
        if preferential_policy_ext is not None:
            self.preferential_policy_ext = preferential_policy_ext
        if facility is not None:
            self.facility = facility
        if play_intro is not None:
            self.play_intro = play_intro
        if traffic is not None:
            self.traffic = traffic
        if pet is not None:
            self.pet = pet
        if scenic_intro is not None:
            self.scenic_intro = scenic_intro

    @property
    def open_time(self):
        """Gets the open_time of this SupplierAttributes3101.  # noqa: E501

        开放时间  # noqa: E501

        :return: The open_time of this SupplierAttributes3101.  # noqa: E501
        :rtype: str
        """
        return self._open_time

    @open_time.setter
    def open_time(self, open_time):
        """Sets the open_time of this SupplierAttributes3101.

        开放时间  # noqa: E501

        :param open_time: The open_time of this SupplierAttributes3101.  # noqa: E501
        :type: str
        """

        self._open_time = open_time

    @property
    def open_time_ext(self):
        """Gets the open_time_ext of this SupplierAttributes3101.  # noqa: E501

        开放时间-扩展区(不超过200个汉字)  # noqa: E501

        :return: The open_time_ext of this SupplierAttributes3101.  # noqa: E501
        :rtype: list[NodeStruct]
        """
        return self._open_time_ext

    @open_time_ext.setter
    def open_time_ext(self, open_time_ext):
        """Sets the open_time_ext of this SupplierAttributes3101.

        开放时间-扩展区(不超过200个汉字)  # noqa: E501

        :param open_time_ext: The open_time_ext of this SupplierAttributes3101.  # noqa: E501
        :type: list[NodeStruct]
        """

        self._open_time_ext = open_time_ext

    @property
    def preferential_policy(self):
        """Gets the preferential_policy of this SupplierAttributes3101.  # noqa: E501

        优待政策(不超过200个汉字)  # noqa: E501

        :return: The preferential_policy of this SupplierAttributes3101.  # noqa: E501
        :rtype: list[SupplierAttributes3101PreferentialPolicy]
        """
        return self._preferential_policy

    @preferential_policy.setter
    def preferential_policy(self, preferential_policy):
        """Sets the preferential_policy of this SupplierAttributes3101.

        优待政策(不超过200个汉字)  # noqa: E501

        :param preferential_policy: The preferential_policy of this SupplierAttributes3101.  # noqa: E501
        :type: list[SupplierAttributes3101PreferentialPolicy]
        """

        self._preferential_policy = preferential_policy

    @property
    def preferential_policy_ext(self):
        """Gets the preferential_policy_ext of this SupplierAttributes3101.  # noqa: E501

        优待政策-扩展区(不超过1000个汉字)  # noqa: E501

        :return: The preferential_policy_ext of this SupplierAttributes3101.  # noqa: E501
        :rtype: list[NodeStruct]
        """
        return self._preferential_policy_ext

    @preferential_policy_ext.setter
    def preferential_policy_ext(self, preferential_policy_ext):
        """Sets the preferential_policy_ext of this SupplierAttributes3101.

        优待政策-扩展区(不超过1000个汉字)  # noqa: E501

        :param preferential_policy_ext: The preferential_policy_ext of this SupplierAttributes3101.  # noqa: E501
        :type: list[NodeStruct]
        """

        self._preferential_policy_ext = preferential_policy_ext

    @property
    def facility(self):
        """Gets the facility of this SupplierAttributes3101.  # noqa: E501

        服务设施列表  # noqa: E501

        :return: The facility of this SupplierAttributes3101.  # noqa: E501
        :rtype: list[SupplierAttributes3101Facility]
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this SupplierAttributes3101.

        服务设施列表  # noqa: E501

        :param facility: The facility of this SupplierAttributes3101.  # noqa: E501
        :type: list[SupplierAttributes3101Facility]
        """

        self._facility = facility

    @property
    def play_intro(self):
        """Gets the play_intro of this SupplierAttributes3101.  # noqa: E501

        玩法介绍(不超过200个汉字)  # noqa: E501

        :return: The play_intro of this SupplierAttributes3101.  # noqa: E501
        :rtype: list[NodeStruct]
        """
        return self._play_intro

    @play_intro.setter
    def play_intro(self, play_intro):
        """Sets the play_intro of this SupplierAttributes3101.

        玩法介绍(不超过200个汉字)  # noqa: E501

        :param play_intro: The play_intro of this SupplierAttributes3101.  # noqa: E501
        :type: list[NodeStruct]
        """

        self._play_intro = play_intro

    @property
    def traffic(self):
        """Gets the traffic of this SupplierAttributes3101.  # noqa: E501

        交通(不超过200个汉字)  # noqa: E501

        :return: The traffic of this SupplierAttributes3101.  # noqa: E501
        :rtype: list[NodeStruct]
        """
        return self._traffic

    @traffic.setter
    def traffic(self, traffic):
        """Sets the traffic of this SupplierAttributes3101.

        交通(不超过200个汉字)  # noqa: E501

        :param traffic: The traffic of this SupplierAttributes3101.  # noqa: E501
        :type: list[NodeStruct]
        """

        self._traffic = traffic

    @property
    def pet(self):
        """Gets the pet of this SupplierAttributes3101.  # noqa: E501

        宠物携带(1:可携带宠物，2:不可携带宠物)  # noqa: E501

        :return: The pet of this SupplierAttributes3101.  # noqa: E501
        :rtype: int
        """
        return self._pet

    @pet.setter
    def pet(self, pet):
        """Sets the pet of this SupplierAttributes3101.

        宠物携带(1:可携带宠物，2:不可携带宠物)  # noqa: E501

        :param pet: The pet of this SupplierAttributes3101.  # noqa: E501
        :type: int
        """

        self._pet = pet

    @property
    def scenic_intro(self):
        """Gets the scenic_intro of this SupplierAttributes3101.  # noqa: E501

        景点介绍(不超过2000个汉字)  # noqa: E501

        :return: The scenic_intro of this SupplierAttributes3101.  # noqa: E501
        :rtype: list[NodeStruct]
        """
        return self._scenic_intro

    @scenic_intro.setter
    def scenic_intro(self, scenic_intro):
        """Sets the scenic_intro of this SupplierAttributes3101.

        景点介绍(不超过2000个汉字)  # noqa: E501

        :param scenic_intro: The scenic_intro of this SupplierAttributes3101.  # noqa: E501
        :type: list[NodeStruct]
        """

        self._scenic_intro = scenic_intro

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplierAttributes3101, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplierAttributes3101):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
