# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MatchResultData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supplier_ext_id': 'str',
        'poi_id': 'str',
        'poi_name': 'str',
        'province': 'str',
        'city': 'str',
        'address': 'str',
        'match_status': 'int',
        'match_status_desc': 'str'
    }

    attribute_map = {
        'supplier_ext_id': 'supplier_ext_id',
        'poi_id': 'poi_id',
        'poi_name': 'poi_name',
        'province': 'province',
        'city': 'city',
        'address': 'address',
        'match_status': 'match_status',
        'match_status_desc': 'match_status_desc'
    }

    def __init__(self, supplier_ext_id=None, poi_id=None, poi_name=None, province=None, city=None, address=None, match_status=None, match_status_desc=None):  # noqa: E501
        """MatchResultData - a model defined in Swagger"""  # noqa: E501
        self._supplier_ext_id = None
        self._poi_id = None
        self._poi_name = None
        self._province = None
        self._city = None
        self._address = None
        self._match_status = None
        self._match_status_desc = None
        self.discriminator = None
        self.supplier_ext_id = supplier_ext_id
        self.poi_id = poi_id
        self.poi_name = poi_name
        self.province = province
        self.city = city
        self.address = address
        self.match_status = match_status
        self.match_status_desc = match_status_desc

    @property
    def supplier_ext_id(self):
        """Gets the supplier_ext_id of this MatchResultData.  # noqa: E501

        第三方商户ID  # noqa: E501

        :return: The supplier_ext_id of this MatchResultData.  # noqa: E501
        :rtype: str
        """
        return self._supplier_ext_id

    @supplier_ext_id.setter
    def supplier_ext_id(self, supplier_ext_id):
        """Sets the supplier_ext_id of this MatchResultData.

        第三方商户ID  # noqa: E501

        :param supplier_ext_id: The supplier_ext_id of this MatchResultData.  # noqa: E501
        :type: str
        """
        if supplier_ext_id is None:
            raise ValueError("Invalid value for `supplier_ext_id`, must not be `None`")  # noqa: E501

        self._supplier_ext_id = supplier_ext_id

    @property
    def poi_id(self):
        """Gets the poi_id of this MatchResultData.  # noqa: E501

        抖音POI ID  # noqa: E501

        :return: The poi_id of this MatchResultData.  # noqa: E501
        :rtype: str
        """
        return self._poi_id

    @poi_id.setter
    def poi_id(self, poi_id):
        """Sets the poi_id of this MatchResultData.

        抖音POI ID  # noqa: E501

        :param poi_id: The poi_id of this MatchResultData.  # noqa: E501
        :type: str
        """
        if poi_id is None:
            raise ValueError("Invalid value for `poi_id`, must not be `None`")  # noqa: E501

        self._poi_id = poi_id

    @property
    def poi_name(self):
        """Gets the poi_name of this MatchResultData.  # noqa: E501

        POI名称  # noqa: E501

        :return: The poi_name of this MatchResultData.  # noqa: E501
        :rtype: str
        """
        return self._poi_name

    @poi_name.setter
    def poi_name(self, poi_name):
        """Sets the poi_name of this MatchResultData.

        POI名称  # noqa: E501

        :param poi_name: The poi_name of this MatchResultData.  # noqa: E501
        :type: str
        """
        if poi_name is None:
            raise ValueError("Invalid value for `poi_name`, must not be `None`")  # noqa: E501

        self._poi_name = poi_name

    @property
    def province(self):
        """Gets the province of this MatchResultData.  # noqa: E501

        POI所在省份  # noqa: E501

        :return: The province of this MatchResultData.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this MatchResultData.

        POI所在省份  # noqa: E501

        :param province: The province of this MatchResultData.  # noqa: E501
        :type: str
        """
        if province is None:
            raise ValueError("Invalid value for `province`, must not be `None`")  # noqa: E501

        self._province = province

    @property
    def city(self):
        """Gets the city of this MatchResultData.  # noqa: E501

        POI所在城市  # noqa: E501

        :return: The city of this MatchResultData.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this MatchResultData.

        POI所在城市  # noqa: E501

        :param city: The city of this MatchResultData.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def address(self):
        """Gets the address of this MatchResultData.  # noqa: E501

        POI地址  # noqa: E501

        :return: The address of this MatchResultData.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MatchResultData.

        POI地址  # noqa: E501

        :param address: The address of this MatchResultData.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def match_status(self):
        """Gets the match_status of this MatchResultData.  # noqa: E501

        匹配状态，0-等待匹配，1-正在匹配，2-匹配成功，3-匹配失败  # noqa: E501

        :return: The match_status of this MatchResultData.  # noqa: E501
        :rtype: int
        """
        return self._match_status

    @match_status.setter
    def match_status(self, match_status):
        """Sets the match_status of this MatchResultData.

        匹配状态，0-等待匹配，1-正在匹配，2-匹配成功，3-匹配失败  # noqa: E501

        :param match_status: The match_status of this MatchResultData.  # noqa: E501
        :type: int
        """
        if match_status is None:
            raise ValueError("Invalid value for `match_status`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1, 2, 3, ""]  # noqa: E501
        if match_status not in allowed_values:
            raise ValueError(
                "Invalid value for `match_status` ({0}), must be one of {1}"  # noqa: E501
                .format(match_status, allowed_values)
            )

        self._match_status = match_status

    @property
    def match_status_desc(self):
        """Gets the match_status_desc of this MatchResultData.  # noqa: E501

        匹配状态描述  # noqa: E501

        :return: The match_status_desc of this MatchResultData.  # noqa: E501
        :rtype: str
        """
        return self._match_status_desc

    @match_status_desc.setter
    def match_status_desc(self, match_status_desc):
        """Sets the match_status_desc of this MatchResultData.

        匹配状态描述  # noqa: E501

        :param match_status_desc: The match_status_desc of this MatchResultData.  # noqa: E501
        :type: str
        """
        if match_status_desc is None:
            raise ValueError("Invalid value for `match_status_desc`, must not be `None`")  # noqa: E501

        self._match_status_desc = match_status_desc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchResultData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchResultData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
