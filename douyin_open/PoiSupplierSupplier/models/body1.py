# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match_type': 'int',
        'match_data_list': 'list[MatchOriginData]'
    }

    attribute_map = {
        'match_type': 'match_type',
        'match_data_list': 'match_data_list'
    }

    def __init__(self, match_type=None, match_data_list=None):  # noqa: E501
        """Body1 - a model defined in Swagger"""  # noqa: E501
        self._match_type = None
        self._match_data_list = None
        self.discriminator = None
        self.match_type = match_type
        self.match_data_list = match_data_list

    @property
    def match_type(self):
        """Gets the match_type of this Body1.  # noqa: E501

        匹配类型，0-离线匹配 1-实时匹配。离线匹配，不会实时返回结果，最大上传1w个数据，通过/poi/supplier/match/query/接口查询匹配结果； 在线匹配，实时返回结果，最大上传100个数据，需要申请授权。  # noqa: E501

        :return: The match_type of this Body1.  # noqa: E501
        :rtype: int
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this Body1.

        匹配类型，0-离线匹配 1-实时匹配。离线匹配，不会实时返回结果，最大上传1w个数据，通过/poi/supplier/match/query/接口查询匹配结果； 在线匹配，实时返回结果，最大上传100个数据，需要申请授权。  # noqa: E501

        :param match_type: The match_type of this Body1.  # noqa: E501
        :type: int
        """
        if match_type is None:
            raise ValueError("Invalid value for `match_type`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1, ""]  # noqa: E501
        if match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"  # noqa: E501
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def match_data_list(self):
        """Gets the match_data_list of this Body1.  # noqa: E501

        第三方上传的有效匹配数据  # noqa: E501

        :return: The match_data_list of this Body1.  # noqa: E501
        :rtype: list[MatchOriginData]
        """
        return self._match_data_list

    @match_data_list.setter
    def match_data_list(self, match_data_list):
        """Sets the match_data_list of this Body1.

        第三方上传的有效匹配数据  # noqa: E501

        :param match_data_list: The match_data_list of this Body1.  # noqa: E501
        :type: list[MatchOriginData]
        """
        if match_data_list is None:
            raise ValueError("Invalid value for `match_data_list`, must not be `None`")  # noqa: E501

        self._match_data_list = match_data_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
