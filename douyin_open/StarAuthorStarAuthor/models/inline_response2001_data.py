# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse2001Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_code': 'ErrorCode',
        'description': 'Description',
        'update_timestamp': 'int',
        'nick_name': 'str',
        'unique_id': 'str',
        'spread_score': 'float',
        'cp_score': 'float',
        'growth_score': 'float',
        'cooperation_score': 'float',
        'shop_score': 'float',
        'star_score': 'float'
    }

    attribute_map = {
        'error_code': 'error_code',
        'description': 'description',
        'update_timestamp': 'update_timestamp',
        'nick_name': 'nick_name',
        'unique_id': 'unique_id',
        'spread_score': 'spread_score',
        'cp_score': 'cp_score',
        'growth_score': 'growth_score',
        'cooperation_score': 'cooperation_score',
        'shop_score': 'shop_score',
        'star_score': 'star_score'
    }

    def __init__(self, error_code=None, description=None, update_timestamp=None, nick_name=None, unique_id=None, spread_score=None, cp_score=None, growth_score=None, cooperation_score=None, shop_score=None, star_score=None):  # noqa: E501
        """InlineResponse2001Data - a model defined in Swagger"""  # noqa: E501
        self._error_code = None
        self._description = None
        self._update_timestamp = None
        self._nick_name = None
        self._unique_id = None
        self._spread_score = None
        self._cp_score = None
        self._growth_score = None
        self._cooperation_score = None
        self._shop_score = None
        self._star_score = None
        self.discriminator = None
        self.error_code = error_code
        self.description = description
        if update_timestamp is not None:
            self.update_timestamp = update_timestamp
        if nick_name is not None:
            self.nick_name = nick_name
        if unique_id is not None:
            self.unique_id = unique_id
        if spread_score is not None:
            self.spread_score = spread_score
        if cp_score is not None:
            self.cp_score = cp_score
        if growth_score is not None:
            self.growth_score = growth_score
        if cooperation_score is not None:
            self.cooperation_score = cooperation_score
        if shop_score is not None:
            self.shop_score = shop_score
        if star_score is not None:
            self.star_score = star_score

    @property
    def error_code(self):
        """Gets the error_code of this InlineResponse2001Data.  # noqa: E501


        :return: The error_code of this InlineResponse2001Data.  # noqa: E501
        :rtype: ErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this InlineResponse2001Data.


        :param error_code: The error_code of this InlineResponse2001Data.  # noqa: E501
        :type: ErrorCode
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501

        self._error_code = error_code

    @property
    def description(self):
        """Gets the description of this InlineResponse2001Data.  # noqa: E501


        :return: The description of this InlineResponse2001Data.  # noqa: E501
        :rtype: Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse2001Data.


        :param description: The description of this InlineResponse2001Data.  # noqa: E501
        :type: Description
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def update_timestamp(self):
        """Gets the update_timestamp of this InlineResponse2001Data.  # noqa: E501

        达人指数更新时间戳  # noqa: E501

        :return: The update_timestamp of this InlineResponse2001Data.  # noqa: E501
        :rtype: int
        """
        return self._update_timestamp

    @update_timestamp.setter
    def update_timestamp(self, update_timestamp):
        """Sets the update_timestamp of this InlineResponse2001Data.

        达人指数更新时间戳  # noqa: E501

        :param update_timestamp: The update_timestamp of this InlineResponse2001Data.  # noqa: E501
        :type: int
        """

        self._update_timestamp = update_timestamp

    @property
    def nick_name(self):
        """Gets the nick_name of this InlineResponse2001Data.  # noqa: E501

        达人昵称  # noqa: E501

        :return: The nick_name of this InlineResponse2001Data.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this InlineResponse2001Data.

        达人昵称  # noqa: E501

        :param nick_name: The nick_name of this InlineResponse2001Data.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def unique_id(self):
        """Gets the unique_id of this InlineResponse2001Data.  # noqa: E501

        达人抖音号  # noqa: E501

        :return: The unique_id of this InlineResponse2001Data.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this InlineResponse2001Data.

        达人抖音号  # noqa: E501

        :param unique_id: The unique_id of this InlineResponse2001Data.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def spread_score(self):
        """Gets the spread_score of this InlineResponse2001Data.  # noqa: E501

        传播指数  # noqa: E501

        :return: The spread_score of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._spread_score

    @spread_score.setter
    def spread_score(self, spread_score):
        """Sets the spread_score of this InlineResponse2001Data.

        传播指数  # noqa: E501

        :param spread_score: The spread_score of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._spread_score = spread_score

    @property
    def cp_score(self):
        """Gets the cp_score of this InlineResponse2001Data.  # noqa: E501

        性价比指数  # noqa: E501

        :return: The cp_score of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._cp_score

    @cp_score.setter
    def cp_score(self, cp_score):
        """Sets the cp_score of this InlineResponse2001Data.

        性价比指数  # noqa: E501

        :param cp_score: The cp_score of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._cp_score = cp_score

    @property
    def growth_score(self):
        """Gets the growth_score of this InlineResponse2001Data.  # noqa: E501

        涨粉指数  # noqa: E501

        :return: The growth_score of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._growth_score

    @growth_score.setter
    def growth_score(self, growth_score):
        """Sets the growth_score of this InlineResponse2001Data.

        涨粉指数  # noqa: E501

        :param growth_score: The growth_score of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._growth_score = growth_score

    @property
    def cooperation_score(self):
        """Gets the cooperation_score of this InlineResponse2001Data.  # noqa: E501

        合作指数  # noqa: E501

        :return: The cooperation_score of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._cooperation_score

    @cooperation_score.setter
    def cooperation_score(self, cooperation_score):
        """Sets the cooperation_score of this InlineResponse2001Data.

        合作指数  # noqa: E501

        :param cooperation_score: The cooperation_score of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._cooperation_score = cooperation_score

    @property
    def shop_score(self):
        """Gets the shop_score of this InlineResponse2001Data.  # noqa: E501

        种草指数  # noqa: E501

        :return: The shop_score of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._shop_score

    @shop_score.setter
    def shop_score(self, shop_score):
        """Sets the shop_score of this InlineResponse2001Data.

        种草指数  # noqa: E501

        :param shop_score: The shop_score of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._shop_score = shop_score

    @property
    def star_score(self):
        """Gets the star_score of this InlineResponse2001Data.  # noqa: E501

        星图指数  # noqa: E501

        :return: The star_score of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._star_score

    @star_score.setter
    def star_score(self, star_score):
        """Sets the star_score of this InlineResponse2001Data.

        星图指数  # noqa: E501

        :param star_score: The star_score of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._star_score = star_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
