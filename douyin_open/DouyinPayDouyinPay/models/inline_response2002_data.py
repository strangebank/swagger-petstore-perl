# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse2002Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ret_code': 'int',
        'ret_msg': 'str',
        'sub_code': 'int',
        'sub_msg': 'str',
        'balance': 'int',
        'ext': 'str'
    }

    attribute_map = {
        'ret_code': 'ret_code',
        'ret_msg': 'ret_msg',
        'sub_code': 'sub_code',
        'sub_msg': 'sub_msg',
        'balance': 'balance',
        'ext': 'ext'
    }

    def __init__(self, ret_code=None, ret_msg=None, sub_code=None, sub_msg=None, balance=None, ext=None):  # noqa: E501
        """InlineResponse2002Data - a model defined in Swagger"""  # noqa: E501
        self._ret_code = None
        self._ret_msg = None
        self._sub_code = None
        self._sub_msg = None
        self._balance = None
        self._ext = None
        self.discriminator = None
        self.ret_code = ret_code
        self.ret_msg = ret_msg
        self.sub_code = sub_code
        self.sub_msg = sub_msg
        self.balance = balance
        self.ext = ext

    @property
    def ret_code(self):
        """Gets the ret_code of this InlineResponse2002Data.  # noqa: E501

        返回码  # noqa: E501

        :return: The ret_code of this InlineResponse2002Data.  # noqa: E501
        :rtype: int
        """
        return self._ret_code

    @ret_code.setter
    def ret_code(self, ret_code):
        """Sets the ret_code of this InlineResponse2002Data.

        返回码  # noqa: E501

        :param ret_code: The ret_code of this InlineResponse2002Data.  # noqa: E501
        :type: int
        """
        if ret_code is None:
            raise ValueError("Invalid value for `ret_code`, must not be `None`")  # noqa: E501

        self._ret_code = ret_code

    @property
    def ret_msg(self):
        """Gets the ret_msg of this InlineResponse2002Data.  # noqa: E501

        返回信息  # noqa: E501

        :return: The ret_msg of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._ret_msg

    @ret_msg.setter
    def ret_msg(self, ret_msg):
        """Sets the ret_msg of this InlineResponse2002Data.

        返回信息  # noqa: E501

        :param ret_msg: The ret_msg of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """
        if ret_msg is None:
            raise ValueError("Invalid value for `ret_msg`, must not be `None`")  # noqa: E501

        self._ret_msg = ret_msg

    @property
    def sub_code(self):
        """Gets the sub_code of this InlineResponse2002Data.  # noqa: E501

        返回码  # noqa: E501

        :return: The sub_code of this InlineResponse2002Data.  # noqa: E501
        :rtype: int
        """
        return self._sub_code

    @sub_code.setter
    def sub_code(self, sub_code):
        """Sets the sub_code of this InlineResponse2002Data.

        返回码  # noqa: E501

        :param sub_code: The sub_code of this InlineResponse2002Data.  # noqa: E501
        :type: int
        """
        if sub_code is None:
            raise ValueError("Invalid value for `sub_code`, must not be `None`")  # noqa: E501

        self._sub_code = sub_code

    @property
    def sub_msg(self):
        """Gets the sub_msg of this InlineResponse2002Data.  # noqa: E501

        返回信息  # noqa: E501

        :return: The sub_msg of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._sub_msg

    @sub_msg.setter
    def sub_msg(self, sub_msg):
        """Sets the sub_msg of this InlineResponse2002Data.

        返回信息  # noqa: E501

        :param sub_msg: The sub_msg of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """
        if sub_msg is None:
            raise ValueError("Invalid value for `sub_msg`, must not be `None`")  # noqa: E501

        self._sub_msg = sub_msg

    @property
    def balance(self):
        """Gets the balance of this InlineResponse2002Data.  # noqa: E501

        余额  # noqa: E501

        :return: The balance of this InlineResponse2002Data.  # noqa: E501
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this InlineResponse2002Data.

        余额  # noqa: E501

        :param balance: The balance of this InlineResponse2002Data.  # noqa: E501
        :type: int
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def ext(self):
        """Gets the ext of this InlineResponse2002Data.  # noqa: E501

        附加信息  # noqa: E501

        :return: The ext of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """Sets the ext of this InlineResponse2002Data.

        附加信息  # noqa: E501

        :param ext: The ext of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """
        if ext is None:
            raise ValueError("Invalid value for `ext`, must not be `None`")  # noqa: E501

        self._ext = ext

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
