# coding: utf-8

"""
    团购活动事件回调

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class OrderInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'channel': 'str',
        'buyer_open_id': 'str',
        'original_amount': 'int',
        'amount': 'int',
        'refund_amount': 'int',
        'settle_amount': 'int',
        'item_count': 'int',
        'status': 'int',
        'create_time': 'int',
        'pay_time': 'int',
        'refund_time': 'int',
        'codes': 'list[CodeInfo]'
    }

    attribute_map = {
        'order_id': 'order_id',
        'channel': 'channel',
        'buyer_open_id': 'buyer_open_id',
        'original_amount': 'original_amount',
        'amount': 'amount',
        'refund_amount': 'refund_amount',
        'settle_amount': 'settle_amount',
        'item_count': 'item_count',
        'status': 'status',
        'create_time': 'create_time',
        'pay_time': 'pay_time',
        'refund_time': 'refund_time',
        'codes': 'codes'
    }

    def __init__(self, order_id=None, channel=None, buyer_open_id=None, original_amount=None, amount=None, refund_amount=None, settle_amount=None, item_count=None, status=None, create_time=None, pay_time=None, refund_time=None, codes=None):  # noqa: E501
        """OrderInfo - a model defined in Swagger"""  # noqa: E501
        self._order_id = None
        self._channel = None
        self._buyer_open_id = None
        self._original_amount = None
        self._amount = None
        self._refund_amount = None
        self._settle_amount = None
        self._item_count = None
        self._status = None
        self._create_time = None
        self._pay_time = None
        self._refund_time = None
        self._codes = None
        self.discriminator = None
        self.order_id = order_id
        self.channel = channel
        self.buyer_open_id = buyer_open_id
        self.original_amount = original_amount
        self.amount = amount
        self.refund_amount = refund_amount
        self.settle_amount = settle_amount
        self.item_count = item_count
        self.status = status
        self.create_time = create_time
        self.pay_time = pay_time
        if refund_time is not None:
            self.refund_time = refund_time
        self.codes = codes

    @property
    def order_id(self):
        """Gets the order_id of this OrderInfo.  # noqa: E501

        团购活动订单Id  # noqa: E501

        :return: The order_id of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderInfo.

        团购活动订单Id  # noqa: E501

        :param order_id: The order_id of this OrderInfo.  # noqa: E501
        :type: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def channel(self):
        """Gets the channel of this OrderInfo.  # noqa: E501

        订单来源  # noqa: E501

        :return: The channel of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this OrderInfo.

        订单来源  # noqa: E501

        :param channel: The channel of this OrderInfo.  # noqa: E501
        :type: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def buyer_open_id(self):
        """Gets the buyer_open_id of this OrderInfo.  # noqa: E501

        买家的open_id  # noqa: E501

        :return: The buyer_open_id of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._buyer_open_id

    @buyer_open_id.setter
    def buyer_open_id(self, buyer_open_id):
        """Sets the buyer_open_id of this OrderInfo.

        买家的open_id  # noqa: E501

        :param buyer_open_id: The buyer_open_id of this OrderInfo.  # noqa: E501
        :type: str
        """
        if buyer_open_id is None:
            raise ValueError("Invalid value for `buyer_open_id`, must not be `None`")  # noqa: E501

        self._buyer_open_id = buyer_open_id

    @property
    def original_amount(self):
        """Gets the original_amount of this OrderInfo.  # noqa: E501

        原价，单位分  # noqa: E501

        :return: The original_amount of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._original_amount

    @original_amount.setter
    def original_amount(self, original_amount):
        """Sets the original_amount of this OrderInfo.

        原价，单位分  # noqa: E501

        :param original_amount: The original_amount of this OrderInfo.  # noqa: E501
        :type: int
        """
        if original_amount is None:
            raise ValueError("Invalid value for `original_amount`, must not be `None`")  # noqa: E501

        self._original_amount = original_amount

    @property
    def amount(self):
        """Gets the amount of this OrderInfo.  # noqa: E501

        订单金额，单位分  # noqa: E501

        :return: The amount of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OrderInfo.

        订单金额，单位分  # noqa: E501

        :param amount: The amount of this OrderInfo.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def refund_amount(self):
        """Gets the refund_amount of this OrderInfo.  # noqa: E501

        退款金额，单位分  # noqa: E501

        :return: The refund_amount of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this OrderInfo.

        退款金额，单位分  # noqa: E501

        :param refund_amount: The refund_amount of this OrderInfo.  # noqa: E501
        :type: int
        """
        if refund_amount is None:
            raise ValueError("Invalid value for `refund_amount`, must not be `None`")  # noqa: E501

        self._refund_amount = refund_amount

    @property
    def settle_amount(self):
        """Gets the settle_amount of this OrderInfo.  # noqa: E501

        结算金额，单位分  # noqa: E501

        :return: The settle_amount of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._settle_amount

    @settle_amount.setter
    def settle_amount(self, settle_amount):
        """Sets the settle_amount of this OrderInfo.

        结算金额，单位分  # noqa: E501

        :param settle_amount: The settle_amount of this OrderInfo.  # noqa: E501
        :type: int
        """
        if settle_amount is None:
            raise ValueError("Invalid value for `settle_amount`, must not be `None`")  # noqa: E501

        self._settle_amount = settle_amount

    @property
    def item_count(self):
        """Gets the item_count of this OrderInfo.  # noqa: E501

        团购券个数  # noqa: E501

        :return: The item_count of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this OrderInfo.

        团购券个数  # noqa: E501

        :param item_count: The item_count of this OrderInfo.  # noqa: E501
        :type: int
        """
        if item_count is None:
            raise ValueError("Invalid value for `item_count`, must not be `None`")  # noqa: E501

        self._item_count = item_count

    @property
    def status(self):
        """Gets the status of this OrderInfo.  # noqa: E501

        * 订单状态   * 1: 订单完成   * 101: 支付完成   * 200: 发起核销   * 201: 核销完成   * 202: 核销失败   * 299: 用户申请退款   * 300: 商户发起退款   * 301: 退款成功   * 302: 退款失败   # noqa: E501

        :return: The status of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderInfo.

        * 订单状态   * 1: 订单完成   * 101: 支付完成   * 200: 发起核销   * 201: 核销完成   * 202: 核销失败   * 299: 用户申请退款   * 300: 商户发起退款   * 301: 退款成功   * 302: 退款失败   # noqa: E501

        :param status: The status of this OrderInfo.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = [1, 101, 200, 201, 202, 299, 300, 301, 302, ""]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def create_time(self):
        """Gets the create_time of this OrderInfo.  # noqa: E501

        订单创建时间 unix time  # noqa: E501

        :return: The create_time of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this OrderInfo.

        订单创建时间 unix time  # noqa: E501

        :param create_time: The create_time of this OrderInfo.  # noqa: E501
        :type: int
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def pay_time(self):
        """Gets the pay_time of this OrderInfo.  # noqa: E501

        订单支付时间 unix time  # noqa: E501

        :return: The pay_time of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._pay_time

    @pay_time.setter
    def pay_time(self, pay_time):
        """Sets the pay_time of this OrderInfo.

        订单支付时间 unix time  # noqa: E501

        :param pay_time: The pay_time of this OrderInfo.  # noqa: E501
        :type: int
        """
        if pay_time is None:
            raise ValueError("Invalid value for `pay_time`, must not be `None`")  # noqa: E501

        self._pay_time = pay_time

    @property
    def refund_time(self):
        """Gets the refund_time of this OrderInfo.  # noqa: E501

        退款完成时间 unix time  # noqa: E501

        :return: The refund_time of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._refund_time

    @refund_time.setter
    def refund_time(self, refund_time):
        """Sets the refund_time of this OrderInfo.

        退款完成时间 unix time  # noqa: E501

        :param refund_time: The refund_time of this OrderInfo.  # noqa: E501
        :type: int
        """

        self._refund_time = refund_time

    @property
    def codes(self):
        """Gets the codes of this OrderInfo.  # noqa: E501

        团购券码列表  # noqa: E501

        :return: The codes of this OrderInfo.  # noqa: E501
        :rtype: list[CodeInfo]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this OrderInfo.

        团购券码列表  # noqa: E501

        :param codes: The codes of this OrderInfo.  # noqa: E501
        :type: list[CodeInfo]
        """
        if codes is None:
            raise ValueError("Invalid value for `codes`, must not be `None`")  # noqa: E501

        self._codes = codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
